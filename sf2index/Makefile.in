ID := all
IDX0_SUFFIX := idx0
BASEDIR := @SearchEnginePath@

USERNAME := $(shell whoami)
TMP_DIR := /tmp/$(USERNAME)/tsubaki_idx_tmp

NICE_VALUE := 19

PERL := nice -n $(NICE_VALUE) perl

CNSDB = $(BASEDIR)/data/cns.100M.cls.df1000.cdb
BLOCKTYPE_DEFINITION = $(BASEDIR)/data/blocktype.WEB
WWW2SF_SENTENCE_LENGTH_MAX = 130

UtilsDir = @UtilsPath@
WWW2sfDir = @WWW2sfPath@
SynGraphDir = @SynGraphPath@
SynDBDir = @SynGraphPath@/syndb/@MachineType@
SynGraphPerlDir = @SynGraphPath@/perl
DetectBlocksDir = @DetectBlocksPath@
JumanCommand = @JUMANPrefix@/bin/juman
KnpCommand = @KNPPrefix@/bin/knp
JumanrcFile = @JUMANPrefix@/etc/jumanrc
KnprcFile = @KNPPrefix@/etc/knprc
UseBlockTypeFlag = @UseBlockTypeFlag@
HTMLExt = @HTMLExt@

WWW2sf_args = -f -c $(CNSDB)
sf2term_args = 
html_relocation_args = 

ifeq "$(UseBlockTypeFlag)" "1"
WWW2sf_args += -D $(DetectBlocksDir) -T
sf2term_args += --blocktype $(BLOCKTYPE_DEFINITION)
endif

ifeq "$(HTMLExt)" "html.gz"
WWW2sf_args += -z
html_relocation_args += -e $(HTMLExt)
endif

XML_SUFFIX := xml
IDX0_SUFFIX := idx0
IDX1_SUFFIX := idx1
IDX_SUFFIX := idx
DF_SUFFIX := $(IDX_SUFFIX).df
DOC_LENGTH_SUFFIX := doc_length.txt
SID2TID_SUFFIX := sid2tid
XML_LIST_SUFFIX := xmllist
URL_TITLE_SUFFIX := url_title
URL_DB_SUFFIX := did2url.cdb
TITLE_DB_SUFFIX := did2title.cdb

DATADIR = @DocumentPath@
HTML_SRC_DIR := @SrcDocumentPath@
HTML_TOP_DIR := $(DATADIR)/html
XML_SIMPLE_TOP_DIR := $(DATADIR)/xml_simple
XML_TOP_DIR := $(DATADIR)/xml
IDX_TOP_DIR := $(DATADIR)/idx

HTML_BASE := $(HTML_TOP_DIR)/????/????
HTML_DIRS := $(wildcard $(HTML_BASE)??)
find_htmls = $(wildcard $(dir)/*.$(HTMLExt))
HTMLS := $(foreach dir, $(HTML_DIRS), $(find_htmls))
HTML_FIRST_DIRS := $(wildcard $(HTML_TOP_DIR)/????)

XML_BASE := $(XML_TOP_DIR)/????
XML_SIMPLE_DIRS := $(sort $(patsubst $(HTML_TOP_DIR)/%,$(XML_SIMPLE_TOP_DIR)/%,$(HTML_DIRS)))
find_xmls = $(wildcard $(dir)/*.$(XML_SUFFIX))
XML_SIMPLES := $(patsubst $(HTML_TOP_DIR)/%.$(HTMLExt),$(XML_SIMPLE_TOP_DIR)/%.$(XML_SUFFIX),$(HTMLS))
XML_DIRS := $(sort $(patsubst $(HTML_TOP_DIR)/%,$(XML_TOP_DIR)/%,$(HTML_DIRS)))
XML_FIRST_DIRS := $(patsubst $(HTML_TOP_DIR)/%,$(XML_TOP_DIR)/%,$(HTML_FIRST_DIRS))
XMLS := $(patsubst $(HTML_TOP_DIR)/%.$(HTMLExt),$(XML_TOP_DIR)/%.$(XML_SUFFIX),$(HTMLS))

HTML_DIR := $(HTML_TOP_DIR)/0000/000000
XML_DIR := $(XML_TOP_DIR)/0000/000000
TMP_XML_DIR = $(TMP_DIR)/tmp_xml_$(notdir $(XML_DIR))

HTML_RELOCATION_DONE := $(DATADIR)/html.relocation.done

IDX_DIRS := $(patsubst $(XML_TOP_DIR)/%,$(IDX_TOP_DIR)/%,$(XML_DIRS))

IDX_FIRST_DIRS := $(patsubst $(HTML_TOP_DIR)/%,$(IDX_TOP_DIR)/%,$(HTML_FIRST_DIRS))

IDXIDXS := $(addsuffix /$(ID).$(IDX_SUFFIX), $(IDX_FIRST_DIRS))
DFS := $(addsuffix /$(ID).$(DF_SUFFIX), $(IDX_FIRST_DIRS))
DOC_LENGTHS := $(patsubst $(IDX_TOP_DIR)/%/$(ID).$(IDX_SUFFIX), $(IDX_TOP_DIR)/%/$(DOC_LENGTH_SUFFIX), $(IDXIDXS))
URL_DBS := $(addsuffix /$(URL_DB_SUFFIX), $(IDX_FIRST_DIRS))
BINS := $(addsuffix /idx.word.dat, $(IDX_FIRST_DIRS))

MERGED_DF_FILE := $(IDX_TOP_DIR)/merged.dffiles
DFDB := $(IDX_TOP_DIR)/df.word.cdb.0

LAST_MAKEFILE = $(word $(words $(MAKEFILE_LIST)),$(MAKEFILE_LIST))

all: $(HTML_RELOCATION_DONE)
	$(MAKE) -f $(LAST_MAKEFILE) indexing

indexing: $(BINS) $(DOC_LENGTHS) $(URL_DBS) $(DFDB)

html: $(HTML_RELOCATION_DONE)
xml_simple: $(XML_SIMPLES)
xml: $(XMLS)

$(HTML_RELOCATION_DONE): $(HTML_SRC_DIR)
	$(BASEDIR)/scripts/html-relocation.sh $(html_relocation_args) $(HTML_SRC_DIR) $(HTML_TOP_DIR) && touch $@


define make_dummy_xml
$(2): $(1)
endef

# $1: /somewhere/xml_simple/0000/000011
define make_xml_simple
$(eval HTML_DIR_$1 := $(patsubst $(XML_SIMPLE_TOP_DIR)/%,$(HTML_TOP_DIR)/%,$(1)))
$(eval HTML_FILES_$1 := $(wildcard $(HTML_DIR_$1)/*.$(HTMLExt)))
$(eval XML_SIMPLE_FILES_$1 := $(patsubst $(HTML_TOP_DIR)/%.$(HTMLExt),$(XML_SIMPLE_TOP_DIR)/%.$(XML_SUFFIX),$(HTML_FILES_$1)))
$(eval XML_SIMPLE_FILE_FIRST_$1 := $(firstword $(XML_SIMPLE_FILES_$1)))
$(eval XML_SIMPLE_REST_FILES_$1 := $(filter-out $(XML_SIMPLE_FILE_FIRST_$1), $(XML_SIMPLE_FILES_$1)))
$(eval TMP_XML_SIMPLE_DIR_$1 := $(TMP_DIR)/tmp_xml_simple_$(notdir $(1)))
$(foreach XML_SIMPLE_REST_FILE, $(XML_SIMPLE_REST_FILES_$1), \
  $(eval $(call make_dummy_xml,$(XML_SIMPLE_FILE_FIRST_$1),$(XML_SIMPLE_REST_FILE))))
$(XML_SIMPLE_FILE_FIRST_$1): $(HTML_FILES_$1)
	if [ ! -d $(TMP_XML_SIMPLE_DIR_$1) ]; then mkdir -p $(TMP_XML_SIMPLE_DIR_$1); fi && \
	if [ ! -d $$(dir $(1)) ]; then mkdir -p $$(dir $(1)); fi && \
	nice -n $(NICE_VALUE) $(WWW2sfDir)/tool/www2sf.sh $(WWW2sf_args) $(HTML_DIR_$1) $(TMP_XML_SIMPLE_DIR_$1) 2> $(TMP_DIR)/www2sf_$(notdir $(1)).log && \
	mv $(TMP_XML_SIMPLE_DIR_$1) $(1) && \
	rm -rf $(TMP_XML_SIMPLE_DIR_$1) $(TMP_DIR)/www2sf_$(notdir $(1)).log 
endef

$(foreach XML_SIMPLE_DIR, $(XML_SIMPLE_DIRS), \
  $(eval $(call make_xml_simple,$(XML_SIMPLE_DIR))))

# $1: /somewhere/xml/0000/000011
define make_xml
$(eval HTML_DIR_$1 := $(patsubst $(XML_TOP_DIR)/%,$(HTML_TOP_DIR)/%,$(1)))
$(eval HTML_FILES_$1 := $(wildcard $(HTML_DIR_$1)/*.$(HTMLExt)))
$(eval XML_SIMPLE_TOP_DIR_$1 := $(patsubst $(XML_TOP_DIR)/%,$(XML_SIMPLE_TOP_DIR)/%,$(1)))
$(eval XML_SIMPLE_FILES_$1 := $(patsubst $(HTML_TOP_DIR)/%.$(HTMLExt),$(XML_SIMPLE_TOP_DIR)/%.$(XML_SUFFIX),$(HTML_FILES_$1)))
$(eval XML_FILES_$1 := $(patsubst $(HTML_TOP_DIR)/%.$(HTMLExt),$(XML_TOP_DIR)/%.$(XML_SUFFIX),$(HTML_FILES_$1)))
$(eval XML_FILE_FIRST_$1 := $(firstword $(XML_FILES_$1)))
$(eval XML_REST_FILES_$1 := $(filter-out $(XML_FILE_FIRST_$1), $(XML_FILES_$1)))
$(eval TMP_XML_DIR_$1 := $(TMP_DIR)/tmp_xml_$(notdir $(1)))
$(foreach XML_REST_FILE, $(XML_REST_FILES_$1), \
  $(eval $(call make_dummy_xml,$(XML_FILE_FIRST_$1),$(XML_REST_FILE))))
$(XML_FILE_FIRST_$1): $(XML_SIMPLE_FILES_$1)
	if [ ! -d $(1) ]; then mkdir -p $(1); fi && \
	$(PERL) -I $(WWW2sfDir)/tool/perl -I $(SynGraphPerlDir) $(WWW2sfDir)/tool/scripts/add-knp-result-dir.perl -syngraph -syndbdir $(SynDBDir) -indir $(XML_SIMPLE_TOP_DIR_$1) -outdir $(1) -sentence_length_max $(WWW2SF_SENTENCE_LENGTH_MAX) -all -syndb_on_memory -jmncmd $(JumanCommand) -knpcmd $(KnpCommand) -jmnrc $(JumanrcFile) -knprc $(KnprcFile) -logfile $(TMP_DIR)/add-knp-result-dir_$(notdir $(1)).log -embed_result_in_xml -print_progress && \
	rm -f $(TMP_DIR)/add-knp-result-dir_$(notdir $(1)).log
endef

$(foreach XML_DIR, $(XML_DIRS), \
  $(eval $(call make_xml,$(XML_DIR))))


# $1: /somewhere/idx/0000/000011
define make_idx1
$(eval IDX1_FILE_$1 := $(1).$(IDX1_SUFFIX))
$(eval XML_DIR_$1 := $(patsubst $(IDX_TOP_DIR)/%,$(XML_TOP_DIR)/%,$(1)))
$(eval HTML_DIR_$1 := $(patsubst $(IDX_TOP_DIR)/%,$(HTML_TOP_DIR)/%,$(1)))
$(eval HTML_FILES_$1 := $(sort $(wildcard $(HTML_DIR_$1)/*.$(HTMLExt))))
$(eval XML_FILES_$1 := $(sort $(patsubst $(HTML_TOP_DIR)/%.$(HTMLExt),$(XML_TOP_DIR)/%.$(XML_SUFFIX),$(HTML_FILES_$1))))
$(eval IDX0_FILES_$1 := $(patsubst $(XML_TOP_DIR)/%.$(XML_SUFFIX),$(IDX_TOP_DIR)/%.$(IDX0_SUFFIX),$(XML_FILES_$1)))
$(IDX1_FILE_$1): $(IDX0_FILES_$1)
	mkdir -p $$(basename $$@).idx.tmp && \
	$(PERL) $(BASEDIR)/scripts/merge_idx.pl -dir $$(basename $$@) -suffix $(IDX0_SUFFIX) -outdir $$(basename $$@).idx.tmp -n 50 && \
	$(PERL) $(BASEDIR)/scripts/merge_sorted_idx.pl -dir $$(basename $$@).idx.tmp -suffix $(IDX0_SUFFIX) > $$@ && \
	rm -rf $$(basename $$@).idx.tmp
# an idx file of 10000 docs
$(IDX0_FILES_$1): $(IDX_TOP_DIR)/%.$(IDX0_SUFFIX): $(XML_TOP_DIR)/%.$(XML_SUFFIX)
	if [ ! -d $(TMP_DIR) ]; then mkdir -p $(TMP_DIR); fi && \
	if [ ! -d "$$(dir $$@)" ]; then mkdir -p $$(dir $$@); fi && \
	$(PERL) -I $(BASEDIR)/cgi $(BASEDIR)/sf2index/sf2term.pl $(sf2term_args) $$< > $(TMP_DIR)/$$(notdir $$@) && \
	mv $(TMP_DIR)/$$(notdir $$@) $$@
endef

$(foreach IDX_DIR, $(IDX_DIRS), \
  $(eval $(call make_idx1,$(IDX_DIR))))

# $1: /somewhere/idx/0000/000011
define make_xmllist
$(eval XML_LIST_FILE_$1 := $(1).$(XML_LIST_SUFFIX))
$(eval HTML_DIR_$1 := $(patsubst $(IDX_TOP_DIR)/%,$(HTML_TOP_DIR)/%,$(1)))
$(eval HTML_FILES_$1 := $(sort $(wildcard $(HTML_DIR_$1)/*.$(HTMLExt)))) 
$(eval XML_FILES_$1 := $(sort $(patsubst $(HTML_TOP_DIR)/%.$(HTMLExt),$(XML_TOP_DIR)/%.$(XML_SUFFIX),$(HTML_FILES_$1))))
$(XML_LIST_FILE_$1): $(XML_FILES_$1)
	mkdir -p $$(dir $$@) && find $$(dir $$<) -type f -name "*.$(XML_SUFFIX)" -print | sort > $$@
endef

$(foreach IDX_DIR, $(IDX_DIRS), \
  $(eval $(call make_xmllist,$(IDX_DIR))))


# $1: /somewhere/idx/0000
define make_sid2tid
$(eval SID2TID_FILE_$1 := $(1)/$(SID2TID_SUFFIX))
$(eval HTML_FIRST_DIR_$1 := $(patsubst $(IDX_TOP_DIR)/%,$(HTML_TOP_DIR)/%,$(1)))
$(eval HTML_DIRS_EACH_$1 := $(wildcard $(HTML_FIRST_DIR_$1)/??????))
$(eval XML_DIRS_EACH_$1 := $(patsubst $(HTML_TOP_DIR)/%,$(XML_TOP_DIR)/%,$(HTML_DIRS_EACH_$1)))
$(eval IDX1_FILES_$1 := $(patsubst $(XML_TOP_DIR)/%,$(IDX_TOP_DIR)/%.$(IDX1_SUFFIX),$(XML_DIRS_EACH_$1)))
$(SID2TID_FILE_$1): $(IDX1_FILES_$1)
	mkdir -p $$(dir $$@) && \
	$(PERL) $(BASEDIR)/scripts/make-mapfile.perl $$(dir $$@)*.$(IDX1_SUFFIX) > $$@
endef

$(foreach IDX_FIRST_DIR, $(IDX_FIRST_DIRS), \
  $(eval $(call make_sid2tid,$(IDX_FIRST_DIR))))

# $1: /somewhere/idx/0000
define make_idxidx
$(eval IDXIDX_FILE_$1 := $(1)/$(ID).$(IDX_SUFFIX))
$(eval HTML_FIRST_DIR_$1 := $(patsubst $(IDX_TOP_DIR)/%,$(HTML_TOP_DIR)/%,$(1)))
$(eval HTML_DIRS_EACH_$1 := $(sort $(wildcard $(HTML_FIRST_DIR_$1)/??????)))
$(eval XML_DIRS_EACH_$1 := $(patsubst $(HTML_TOP_DIR)/%,$(XML_TOP_DIR)/%,$(HTML_DIRS_EACH_$1)))
$(eval IDX1_FILES_$1 := $(patsubst $(XML_TOP_DIR)/%,$(IDX_TOP_DIR)/%.$(IDX1_SUFFIX),$(XML_DIRS_EACH_$1)))
$(eval SID2TID_FILE_$1 := $(1)/$(SID2TID_SUFFIX))
$(IDXIDX_FILE_$1): $(IDX1_FILES_$1) $(SID2TID_FILE_$1)
	$(PERL) $(BASEDIR)/scripts/merge_sorted_idx.pl -dir $$(dir $$@) -mapfile $(SID2TID_FILE_$1) -suffix $(IDX1_SUFFIX) > $$@
endef

$(foreach IDX_FIRST_DIR, $(IDX_FIRST_DIRS), \
  $(eval $(call make_idxidx,$(IDX_FIRST_DIR))))

# $1: /somewhere/idx/0000
define make_urltitle_all
$(eval URL_TITLE_FILE_$1 := $(1)/$(URL_TITLE_SUFFIX))
$(eval HTML_FIRST_DIR_$1 := $(patsubst $(IDX_TOP_DIR)/%,$(HTML_TOP_DIR)/%,$(1)))
$(eval HTML_DIRS_EACH_$1 := $(sort $(wildcard $(HTML_FIRST_DIR_$1)/??????)))
$(eval XML_DIRS_EACH_$1 := $(patsubst $(HTML_TOP_DIR)/%,$(XML_TOP_DIR)/%,$(HTML_DIRS_EACH_$1)))
$(eval XML_LIST_FILES_$1 := $(patsubst $(XML_TOP_DIR)/%,$(IDX_TOP_DIR)/%.$(XML_LIST_SUFFIX),$(XML_DIRS_EACH_$1)))
$(eval URL_TITLE_FILES_$1 := $(patsubst $(IDX_TOP_DIR)/%.$(XML_LIST_SUFFIX),$(IDX_TOP_DIR)/%.$(URL_TITLE_SUFFIX),$(XML_LIST_FILES_$1)))
$(URL_TITLE_FILE_$1):$(URL_TITLE_FILES_$1)
	cat $$^ > $$@

$(URL_TITLE_FILES_$1): $(IDX_TOP_DIR)/%.$(URL_TITLE_SUFFIX): $(IDX_TOP_DIR)/%.$(XML_LIST_SUFFIX)
	if [ ! -d $(TMP_DIR) ]; then mkdir -p $(TMP_DIR); fi && \
	$(PERL) $(BASEDIR)/scripts/extract-url-title.perl -files $$< > $(TMP_DIR)/$$(notdir $$@) && \
	mv $(TMP_DIR)/$$(notdir $$@) $$@
endef

$(foreach IDX_FIRST_DIR, $(IDX_FIRST_DIRS), \
  $(eval $(call make_urltitle_all,$(IDX_FIRST_DIR))))


$(BINS): $(IDX_TOP_DIR)/%/idx.word.dat: $(IDX_TOP_DIR)/%/$(ID).$(IDX_SUFFIX)
	$(PERL) -I $(UtilsDir)/perl -I $(BASEDIR)/scripts $(BASEDIR)/scripts/binarize_idx.pl -syn $<

$(DFS): $(IDX_TOP_DIR)/%.$(DF_SUFFIX): $(IDX_TOP_DIR)/%.$(IDX_SUFFIX)
	$(PERL) $(BASEDIR)/scripts/idx2df.pl $<

$(DOC_LENGTHS): $(IDX_TOP_DIR)/%/$(DOC_LENGTH_SUFFIX): $(IDX_TOP_DIR)/%/$(ID).$(IDX_SUFFIX)
	$(PERL) $(BASEDIR)/scripts/make-dlength-db.perl -txt $<

$(URL_DBS): $(IDX_TOP_DIR)/%$(URL_DB_SUFFIX): $(IDX_TOP_DIR)/%$(URL_TITLE_SUFFIX)
	$(PERL) $(BASEDIR)/scripts/make-url-title-cdbs.perl --titledb $(patsubst %$(URL_DB_SUFFIX),%$(TITLE_DB_SUFFIX),$@) --urldb $@ $<

$(MERGED_DF_FILE): $(DFS)
	$(PERL) $(BASEDIR)/scripts/merge_dffiles.perl $^ > $@

$(DFDB): $(MERGED_DF_FILE)
	$(PERL) -I $(UtilsDir)/perl $(BASEDIR)/scripts/make-df-db.perl --dir $(IDX_TOP_DIR) < $<

clean:
	rm -rf $(TMP_DIR) $(HTML_TOP_DIR) $(HTML_RELOCATION_DONE) $(XML_TOP_DIR) $(IDX_TOP_DIR)
