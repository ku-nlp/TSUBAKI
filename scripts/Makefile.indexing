# $Id$

SHELL = sh
CONFIG = ${HOME}/cvs/SearchEngine/conf/indexing.conf
PERL = perl
IDXID = 000
HOST_FILE = /share09/home/skeiji/work/mkidx/090724/SearchEngine/scripts/hosts
CDIR = /share09/home/skeiji/work/mkidx/090724/SearchEngine/scripts

include $(CONFIG)



# mk_termfiles に関係した変数
ACCESS_METHOD = ssh
PARA = 3
NUM_OF_FILES_PER_FLIST = 50000
DATA_DIR = /data2/work/wisdom/newsid
SF_DIR = $(DATA_DIR)/xmls
TERM_DIR = $(DATA_DIR)/terms
LINK_DATA_DIR = $(DATA_DIR)/xmls.link
LINK_TERM_DIR = $(DATA_DIR)/terms.link

XMLFILES = $(workspace_mkidx)/xmlfiles
TERMFILES = $(workspace_mkidx)/termfiles
LINK_FILES = $(workspace_mkidx)/linkfiles
LINK_TERM_FILES = $(workspace_mkidx)/link.termfiles

RMFILES = $(idxdir)/rmfiles
LOGFILE = $(workspace_mkidx)/logfile
TARGETIDS = $(DATA_DIR)/targetids

# mg_termfiles に関係した変数
OFFSET = 0
IDXFILES = $(workspace_mgidx)/idxfiles
N = 100
M = 100
IDX2DID = $(workspace_mkidx)/idx2did
IDXDAT = $(workspace_mgidx)/$(IDXID).idx.gz
ANCHOR_IDXDAT = $(workspace_mgidx)/a$(IDXID).idx.gz


# mk_url_title_db に関係した変数
URL_TITLE_TXT = $(workspace_mkidx)/url.title.txt
utildir = $(HOME)/cvs/Utils





######################################################
# インデックスデータを構築するターゲット（再配置後用）
######################################################

construct: mk_termfiles mg_termfiles binarize mk_dfdb mk_url_title_db trim_idxdat copy

########################################################
# インデックスデータを構築するターゲット（データ追加用）
########################################################

append: mk_targetids mk_termfiles mg_termfiles binarize mk_url_title_db copy





######################
# タームファイルの作成
######################

mk_termfiles: mk_taskfile_for_mk_termfiles run_taskfile_for_mk_termfiles

# タームファイル作成のための tasks ファイルを生成
mk_taskfile_for_mk_termfiles: connect_node
	gxpc e rm -r $(workspace_mkidx)/flists 2> /dev/null
	gxpc e mkdir -p $(workspace_mkidx)/flists 2> /dev/null
	gxpc e mkdir -p $(TERM_DIR) 2> /dev/null
	gxpc e touch $(XMLFILES) $(TERMFILES)

# 	通常インデックス
	gxpc e "find $(SF_DIR) -type f -name \"*xml.gz\" | grep -v inlink 2> /dev/null > $(XMLFILES)"
	gxpc e "find $(TERM_DIR) -type f -name \"*idx.gz\" | grep -v inlink 2> /dev/null > $(TERMFILES)"
	gxpc e $(PERL) $(scriptdir)/make-target-flist.perl -xmlfiles $(XMLFILES) -termfiles $(TERMFILES) -targetids $(TARGETIDS) -outdir $(workspace_mkidx)/flists -split $(NUM_OF_FILES_PER_FLIST) -suffix body
	gxpc e 'for f in `ls $(workspace_mkidx)/flists/flist.*.body` ; do echo ":on" $$HOSTNAME ";" sh $(scriptdir)/extract-terms.sh $$f $(TERM_DIR) ; done > $(workspace_mkidx)/tasks'

# 	アンカーインデックス
	gxpc e "find $(LINK_DATA_DIR) -type f -name \"*xml.gz\" > $(LINK_FILES)"
	gxpc e "find $(LINK_TERM_DIR) -type f -name \"*idx.gz\" > $(LINK_TERM_FILES)"
	gxpc e $(PERL) $(scriptdir)/make-target-flist.perl -xmlfiles $(LINK_FILES) -termfiles $(LINK_TERM_FILES) -targetids $(TARGETIDS) -outdir $(workspace_mkidx)/flists -split $(NUM_OF_FILES_PER_FLIST) -suffix inlink -ignore_version
	gxpc e 'for f in `ls $(workspace_mkidx)/flists/flist.*.inlink` ; do echo ":on" $$HOSTNAME ";" sh $(scriptdir)/extract-terms.sh $$f $(LINK_TERM_DIR) -inlinks ; done >> $(workspace_mkidx)/tasks'

	gxpc e 'cp $(workspace_mkidx)/tasks $(CDIR)/tasks.$$HOSTNAME'
	gxpc quit
	cat $(CDIR)/tasks.* | awk '{print "task"NR, $$0}' > $(CDIR)/tasks
	rm tasks.*

# tasks を実行する
run_taskfile_for_mk_termfiles: connect_node2
	gxpc cd $(workspace_mkidx)
	gxpc ep $(CDIR)/tasks
	gxpc quit





########################
# タームファイルのマージ
########################

mg_termfiles: mg_termfiles_for_body mg_termfiles_for_inlinks

# タームファイルのマージ
mg_termfiles_for_body: connect_node3
#	抽出したtermをメモリを使ってマージ(マージ1)
	gxpc e "mkdir -p $(workspace_mgidx) 2> /dev/null"
	gxpc e "find $(TERM_DIR) -type f | grep -v inlink 2> /dev/null 2> /dev/null | perl $(scriptdir)/select-targetids.perl $(TARGETIDS) > $(IDXFILES)"
	gxpc e "cat $(IDXFILES) | rev | cut -f 1 -d / | rev | cut -f 1 -d . | awk '{printf \"%s %06d\n\",\$$0, NR - 1}' > $(IDX2DID)"
	gxpc e "$(PERL) $(scriptdir)/merge_idx.pl -idxfiles $(IDXFILES) -z -offset $(OFFSET) -compress -n $(N) -idx2did $(IDX2DID)"

#	M ファイルごとにディレクトリに移動
	gxpc e "ls -t $(workspace_mgidx) | awk '/idxfiles.*idx.gz/ {print \"$(workspace_mgidx)/\"\$$1}' > $(workspace_mgidx)/flist"
	gxpc e "cat $(workspace_mgidx)/flist | awk '{printf \"$(workspace_mgidx)/i%03d\n\", int((NR-1)/$(M))}' > $(workspace_mgidx)/tmpdirs"
	gxpc e "sort -u $(workspace_mgidx)/tmpdirs | xargs mkdir -p"
	gxpc e "paste -d ' ' $(workspace_mgidx)/flist $(workspace_mgidx)/tmpdirs | awk '{print \"mv\", \$$1, \$$2\"/\"}' > $(workspace_mgidx)/mv.sh"
	gxpc e sh $(workspace_mgidx)/mv.sh
	gxpc e rm $(workspace_mgidx)/mv.sh
	gxpc e rm $(workspace_mgidx)/flist

#	ディレクトリ内のファイル(M件)をディスクを使ってマージ(マージ2)
	gxpc e 'for d in `cat $(workspace_mgidx)/tmpdirs | sort -u` ; do $(PERL) $(scriptdir)/merge_sorted_idx.pl -dir $$d -suffix gz -z | gzip > $$d.idx.gz ; done'
	gxpc e 'for d in `cat $(workspace_mgidx)/tmpdirs | sort -u` ; do rm -r $$d ; done'
	gxpc e rm $(workspace_mgidx)/tmpdirs

#	M件ごとにマージされたファイルをマージ(マージ3)
	gxpc e "mkdir -p $(workspace_mgidx)/dat 2> /dev/null"
	gxpc e "mv $(workspace_mgidx)/i*.idx.gz $(workspace_mgidx)/dat"
	gxpc e "$(PERL) $(scriptdir)/merge_sorted_idx.pl -dir $(workspace_mgidx)/dat -suffix gz -z | gzip > $(IDXDAT)"
	gxpc e "rm -r $(workspace_mgidx)/dat"
	gxpc e "rm $(IDXFILES)"
	gxpc quit

# タームファイル（リンク）のマージ
mg_termfiles_for_inlinks: connect_node4
#	抽出したtermをメモリを使ってマージ(マージ1)
	gxpc e "mkdir -p $(workspace_mgidx) 2> /dev/null"
	gxpc e "find $(LINK_TERM_DIR) -type f | perl $(scriptdir)/select-targetids.perl $(TARGETIDS) -ignore_version > $(IDXFILES)"
	gxpc e "$(PERL) $(scriptdir)/merge_idx.pl -idxfiles $(IDXFILES) -ignore_version -z -offset $(OFFSET) -compress -n $(N) -idx2did $(IDX2DID)"

#	M ファイルごとにディレクトリに移動
	gxpc e "ls -t $(workspace_mgidx) | awk '/idxfiles.*idx.gz/ {print \"$(workspace_mgidx)/\"\$$1}' > $(workspace_mgidx)/flist"
	gxpc e "cat $(workspace_mgidx)/flist | awk '{printf \"$(workspace_mgidx)/i%03d\n\", int((NR-1)/$(M))}' > $(workspace_mgidx)/tmpdirs"
	gxpc e "sort -u $(workspace_mgidx)/tmpdirs | xargs mkdir -p 2> /dev/null"
	gxpc e "paste -d ' ' $(workspace_mgidx)/flist $(workspace_mgidx)/tmpdirs | awk '{print \"mv\", \$$1, \$$2\"/\"}' > $(workspace_mgidx)/mv.sh"
	gxpc e sh $(workspace_mgidx)/mv.sh 2> /dev/null
	gxpc e rm $(workspace_mgidx)/mv.sh
	gxpc e rm $(workspace_mgidx)/flist

#	ディレクトリ内のファイル(M件)をディスクを使ってマージ(マージ2)
	gxpc e 'for d in `cat $(workspace_mgidx)/tmpdirs | sort -u` ; do $(PERL) $(scriptdir)/merge_sorted_idx.pl -dir $$d -suffix gz -z | gzip > $$d.idx.gz ; done'
	gxpc e 'for d in `cat $(workspace_mgidx)/tmpdirs | sort -u` ; do rm -r $$d ; done'
	gxpc e rm $(workspace_mgidx)/tmpdirs

#	M件ごとにマージされたファイルをマージ(マージ3)
	gxpc e "mkdir -p $(workspace_mgidx)/dat 2> /dev/null"
	gxpc e "mv $(workspace_mgidx)/i*.idx.gz $(workspace_mgidx)/dat 2> /dev/null"
	gxpc e "$(PERL) $(scriptdir)/merge_sorted_idx.pl -dir $(workspace_mgidx)/dat -suffix gz -z | gzip > $(ANCHOR_IDXDAT)"
	gxpc e "rm -r $(workspace_mgidx)/dat"
	gxpc e "rm $(IDXFILES)"
	gxpc quit





################################
# インデックスデータのバイナリ化
################################

binarize: connect_node5
#	idx ファイルをバイナリ化
	gxpc e $(PERL) -I $(scriptdir) $(scriptdir)/binarize_idx.pl -z -quiet -syn $(IDXDAT)

#	文書頻度の取得
	gxpc e $(PERL) $(scriptdir)/idx2df.pl $(IDXDAT)
	gxpc e "cp $(workspace_mgidx)/$(IDXID).idx.df $(workspace_mgidx)/$(IDXID).idx.df.ORG"

#	文書長データベースの作成
	gxpc e $(PERL) $(scriptdir)/make-dlength-db.perl -z $(IDXDAT)

#	削除
	gxpc e rm $(IDXDAT)

#	アンカーインデックスのバイナリ化
	gxpc e $(PERL) -I $(scriptdir) $(scriptdir)/binarize_idx.pl -z -quiet -syn $(ANCHOR_IDXDAT)
	gxpc e rm $(ANCHOR_IDXDAT)
	gxpc quit





#######################
# DFデータベースの作成
#######################

mk_dfdb: connect_node5
	gxpc e "cp $(workspace_mgidx)/$(IDXID).idx.df.ORG $(workspace_mgidx)/$(IDXID).idx.df"
	gxpc e "cat -n $(HOST_FILE) | grep \$$HOSTNAME | awk '{print \"mv $(workspace_mgidx)/$(IDXID).idx.df $(workspace_mgidx)/\"\$$1\".idx.df\"}' > $(workspace_mgidx)/mv.sh"
	gxpc e sh $(workspace_mgidx)/mv.sh
#	奇数番目のノードを獲得
	gxpc e "cat -n $(HOST_FILE) | grep \$$HOSTNAME | awk '{if(\$$1%2==1) print \$$2}' | grep \$$HOSTNAME"
	gxpc smask
	gxpc e hostname

#	データのコピー
	gxpc e 'for h in `grep -A 1 $$HOSTNAME $(HOST_FILE) | tail -1 | cut -f 1 -d " "` ; do cat -n $(HOST_FILE) | grep $$h | awk "{print \"scp \"\$$2\":$(workspace_mgidx)/\"\$$1\".idx.df $(workspace_mgidx)/\"}" ; done > $(workspace_mgidx)/scp.sh'
	gxpc e sh $(workspace_mgidx)/scp.sh

	gxpc cd $(workspace_mgidx)
	gxpc e rm -r tmp 2> /dev/null
	gxpc e mkdir tmp 2> /dev/null
	gxpc e mv *idx.df tmp/

	gxpc e '$(PERL) $(scriptdir)/merge_dffiles.perl -dpnd_th 0 tmp/*df > $(IDXID).idx.df'

	gxpc e "cat -n $(HOST_FILE) | grep \$$HOSTNAME | awk '{print \"mv $(workspace_mgidx)/$(IDXID).idx.df $(workspace_mgidx)/\"\$$1\".idx.df\"}' > $(workspace_mgidx)/mv.sh"
	gxpc e sh $(workspace_mgidx)/mv.sh


#	N%4==1となるノードを獲得
	gxpc e "cat -n $(HOST_FILE) | grep \$$HOSTNAME | awk '{if(\$$1%4==1) print \$$2}' | grep \$$HOSTNAME"
	gxpc smask
	gxpc e hostname
#	データのコピー
	gxpc e 'for h in `grep -A 2 $$HOSTNAME $(HOST_FILE) | tail -1 | cut -f 1 -d " "` ; do cat -n $(HOST_FILE) | grep $$h | awk "{print \"scp \"\$$2\":$(workspace_mgidx)/\"\$$1\".idx.df $(workspace_mgidx)/\"}" ; done > $(workspace_mgidx)/scp.sh'
	gxpc e sh $(workspace_mgidx)/scp.sh
	gxpc cd $(workspace_mgidx)
	gxpc e rm -r tmp
	gxpc e mkdir tmp 2> /dev/null
	gxpc e mv *idx.df tmp/
	gxpc e '$(PERL) $(scriptdir)/merge_dffiles.perl -dpnd_th 0 tmp/*df > $(IDXID).idx.df'

	gxpc e "cat -n $(HOST_FILE) | grep \$$HOSTNAME | awk '{print \"mv $(workspace_mgidx)/$(IDXID).idx.df $(workspace_mgidx)/\"\$$1\".idx.df\"}' > $(workspace_mgidx)/mv.sh"
	gxpc e sh $(workspace_mgidx)/mv.sh


#	N%8==1となるノードを獲得
	gxpc e "cat -n $(HOST_FILE) | grep \$$HOSTNAME | awk '{if(\$$1%8==1) print \$$2}' | grep \$$HOSTNAME"
	gxpc smask
	gxpc e hostname

#	データのコピー
	gxpc e 'for h in `grep -A 4 $$HOSTNAME $(HOST_FILE) | tail -1 | cut -f 1 -d " "` ; do cat -n $(HOST_FILE) | grep $$h | awk "{print \"scp \"\$$2\":$(workspace_mgidx)/\"\$$1\".idx.df $(workspace_mgidx)/\"}" ; done > $(workspace_mgidx)/scp.sh'
	gxpc e sh $(workspace_mgidx)/scp.sh

	gxpc cd $(workspace_mgidx)
	gxpc e rm -r tmp
	gxpc e mkdir tmp 2> /dev/null
	gxpc e mv *idx.df tmp/

	gxpc e '$(PERL) $(scriptdir)/merge_dffiles.perl -dpnd_th 0 tmp/*df > $(IDXID).idx.df'

	gxpc e "cat -n $(HOST_FILE) | grep \$$HOSTNAME | awk '{print \"mv $(workspace_mgidx)/$(IDXID).idx.df $(workspace_mgidx)/\"\$$1\".idx.df\"}' > $(workspace_mgidx)/mv.sh"
	gxpc e sh $(workspace_mgidx)/mv.sh


#	N%16==1となるノードを獲得
	gxpc e "cat -n $(HOST_FILE) | grep \$$HOSTNAME | awk '{if(\$$1%16==1) print \$$2}' | grep \$$HOSTNAME"
	gxpc smask
	gxpc e hostname

#	データのコピー
	gxpc e 'for h in `grep -A 8 $$HOSTNAME $(HOST_FILE) | tail -1 | cut -f 1 -d " "` ; do cat -n $(HOST_FILE) | grep $$h | awk "{print \"scp \"\$$2\":$(workspace_mgidx)/\"\$$1\".idx.df $(workspace_mgidx)/\"}" ; done > $(workspace_mgidx)/scp.sh'
	gxpc e sh $(workspace_mgidx)/scp.sh

	gxpc cd $(workspace_mgidx)
	gxpc e rm -r tmp
	gxpc e mkdir tmp 2> /dev/null
	gxpc e mv *idx.df tmp/

	gxpc e '$(PERL) $(scriptdir)/merge_dffiles.perl -dpnd_th 0 tmp/*df > $(IDXID).idx.df'
	gxpc e "cat -n $(HOST_FILE) | grep \$$HOSTNAME | awk '{print \"mv $(workspace_mgidx)/$(IDXID).idx.df $(workspace_mgidx)/\"\$$1\".idx.df\"}' > $(workspace_mgidx)/mv.sh"
	gxpc e sh $(workspace_mgidx)/mv.sh


#	N%32==1となるノードを獲得
	gxpc e "cat -n $(HOST_FILE) | grep \$$HOSTNAME | awk '{if(\$$1%32==1) print \$$2}' | grep \$$HOSTNAME"
	gxpc smask
	gxpc e hostname

#	データのコピー
	gxpc e 'for h in `grep -A 16 $$HOSTNAME $(HOST_FILE) | tail -1 | cut -f 1 -d " "` ; do cat -n $(HOST_FILE) | grep $$h | awk "{print \"scp \"\$$2\":$(workspace_mgidx)/\"\$$1\".idx.df $(workspace_mgidx)/\"}" ; done > $(workspace_mgidx)/scp.sh'
	gxpc e sh $(workspace_mgidx)/scp.sh

	gxpc e rm -r tmp
	gxpc e mkdir tmp 2> /dev/null
	gxpc e mv *idx.df tmp/

	gxpc e '$(PERL) $(scriptdir)/merge_dffiles.perl -dpnd_th 0 tmp/*df > $(IDXID).idx.df'


#	マージ用ホストにディレクトリを作成
	ssh $(host_of_mkdfdb) "mkdir -p $(workspace_mkdfdb)"

	gxpc e "cat -n $(HOST_FILE) | grep \$$HOSTNAME | awk '{print \"scp $(workspace_mgidx)/$(IDXID).idx.df $(host_of_mkdfdb):$(workspace_mkdfdb)/\"\$$1\".idx.df\"}' > $(workspace_mgidx)/scp.sh"
	gxpc e sh $(workspace_mgidx)/scp.sh


#	不要ファイル・ディレクトリの削除
	gxpc rmask
	gxpc e 'rm -f $(workspace_mgidx)/scp.sh'
	gxpc e 'rm -fr $(workspace_mgidx)/mv.sh'
	gxpc e 'rm -fr $(workspace_mgidx)/tmp'
	gxpc e 'rm -fr $(workspace_mgidx)/*df'
	gxpc quit


#	最後のマージ
	ssh $(host_of_mkdfdb) "$(PERL) $(scriptdir)/merge_dffiles.perl -dpnd_th 1 $(workspace_mkdfdb)/*df > $(workspace_mkdfdb)/merged.df.dat"
	ssh $(host_of_mkdfdb) "rm $(workspace_mkdfdb)/*df"

#	DB化
	ssh $(host_of_mkdfdb) "cd $(workspace_mkdfdb) ; $(PERL) -I $(HOME)/cvs/Utils/perl $(scriptdir)/make-df-db.perl < $(workspace_mkdfdb)/merged.df.dat"
	ssh $(host_of_mkdfdb) "rm $(workspace_mkdfdb)/merged.df.dat"

#	dfdb ディレクトリをまとめる
	ssh $(host_of_mkdfdb) "mkdir -p $(workspace_mkdfdb)/dfdbs"
	ssh $(host_of_mkdfdb) "mv $(workspace_mkdfdb)/*cdb* $(workspace_mkdfdb)/dfdbs"
	ssh $(host_of_mkdfdb) "cd $(workspace_mkdfdb) ; tar czf dfdbs.tgz dfdbs"
	ssh $(host_of_mkdfdb) "rm -r $(workspace_mkdfdb)/dfdbs"





##############################################
# 不要なタームをインデックスデータから削除する
##############################################

trim_idxdat: connect_node7
#	dfdb のコピー
	gxpc mw bcp $(host_of_mkdfdb):$(workspace_mkdfdb)/dfdbs.tgz $(workspace_mgidx)
	gxpc cd $(workspace_mgidx)
	gxpc e tar xzf dfdbs.tgz
	gxpc e rm dfdbs.tgz

#	$host_of_mkdfdbを外す
	gxpc e "hostname | grep -v $(host_of_mkdfdb)"
	gxpc smask


#	index に登録する term の選出
	gxpc e 'for f in `ls dfdbs/df.word.cdb.?` ; do $(PERL) $(scriptdir)/cdb-dump $$f ; done > df.word.txt' 
	gxpc e 'for f in `ls dfdbs/df.dpnd.cdb.* | grep -v keymap` ; do $(PERL) $(scriptdir)/cdb-dump $$f ; done > df.dpnd.txt' 
	gxpc e '$(PERL) $(scriptdir)/remove-non-japanese-terms.perl -number -katakana -alphabet -symbol < $(workspace_mgidx)/df.word.txt | $(PERL) -I $(HOME)/cvs/Utils/perl $(HOME)/cvs/Utils/scripts/make-db.perl -dbname term.cdb -keymapfile term.cdb.keymap'
	gxpc e '$(PERL) $(scriptdir)/remove-non-japanese-terms.perl -termdb term.cdb.0 -freq 9 < $(workspace_mgidx)/df.dpnd.txt | $(PERL) -I $(HOME)/cvs/Utils/perl $(HOME)/cvs/Utils/scripts/make-db.perl -dbname term.dpnd.cdb -keymapfile term.dpnd.cdb.keymap'


#	不要 term の削除
#	通常インデックス
	gxpc e touch $(workspace_mgidx)/term.cdb.keymap 2> /dev/null
	gxpc e '$(PERL) -I $(HOME)/cvs/Utils/perl $(scriptdir)/remove-incorrect-terms-from-indexdat.perl -termdb $(workspace_mgidx)/term.cdb.keymap -idxdat $(workspace_mgidx)/idx$(IDXID).word.dat -type word'
	gxpc e '$(PERL) -I $(HOME)/cvs/Utils/perl $(scriptdir)/remove-incorrect-terms-from-indexdat.perl -termdb $(workspace_mgidx)/term.dpnd.cdb.keymap -idxdat $(workspace_mgidx)/idx$(IDXID).dpnd.dat -type dpnd'
#	アンカーインデックス
	gxpc e '$(PERL) -I $(HOME)/cvs/Utils/perl $(scriptdir)/remove-incorrect-terms-from-indexdat.perl -termdb $(workspace_mgidx)/term.cdb.keymap -idxdat $(workspace_mgidx)/idxa$(IDXID).word.dat -type word -anchor'
	gxpc e '$(PERL) -I $(HOME)/cvs/Utils/perl $(scriptdir)/remove-incorrect-terms-from-indexdat.perl -termdb $(workspace_mgidx)/term.dpnd.cdb.keymap -idxdat $(workspace_mgidx)/idxa$(IDXID).dpnd.dat -type dpnd -anchor'


#	不要ファイルの削除
	gxpc e rm -fr dfdbs
	gxpc e rm -f df.word.txt df.dpnd.txt
	gxpc e rm -f term.*cdb*

	gxpc quit





##########################################
# タイトル、URL、文書長データベースの作成
##########################################

mk_url_title_db: connect_node8
	gxpc e 'find $(SF_DIR) -type f -name "*xml.gz" | grep -v inlink 2> /dev/null | perl $(scriptdir)/select-targetids.perl $(TARGETIDS) > $(XMLFILES)'
	gxpc e '$(PERL) $(scriptdir)/extract-url-title.perl -files $(XMLFILES) > $(URL_TITLE_TXT)'
	gxpc e mkdir -p $(workspace_mkdb) 2> /dev/null
	gxpc cd $(workspace_mkdb)
	gxpc e "perl -pe 's/ +/ /g' $(URL_TITLE_TXT) | awk '{print \$$1, \$$2}' | $(PERL) -I$(utildir)/perl $(utildir)/scripts/make-db.perl -dbname did2url.cdb -keymapfile did2url.cdb.keymap"
	gxpc e "perl -pe 's/ +/ /g' $(URL_TITLE_TXT) | awk '{print \$$1, \$$3}' | $(PERL) -I$(utildir)/perl $(utildir)/scripts/make-db.perl -dbname did2title.cdb -keymapfile did2title.cdb.keymap"
	gxpc e "perl -pe 's/ +/ /g' $(URL_TITLE_TXT) | awk '{print \$$1, \$$4}' > $(IDXID).doc_length.txt"
	gxpc quit




##########################
# インデックスデータの配置
##########################

copy: connect_node9
#	インデックスデータを置くディレクトリを作成
	gxpc e "mkdir -p $(idxdir) 2> /dev/null"
	gxpc e "mkdir -p $(aidxdir) 2> /dev/null"

#	インデックスデータのコピー
	gxpc e mv $(workspace_mgidx)/idx$(IDXID).word.dat.2 $(idxdir)/idx$(IDXID).word.dat
	gxpc e mv $(workspace_mgidx)/idx$(IDXID).dpnd.dat.2 $(idxdir)/idx$(IDXID).dpnd.dat
	gxpc e mv $(workspace_mgidx)/offset$(IDXID).{word,dpnd}.cdb.2.* $(idxdir)/
	gxpc e 'for f in `ls $(idxdir)/offset$(IDXID).{word,dpnd}.cdb.2.0` ; do mv $$f `echo $$f | perl -pe "s/cdb.2.0/cdb/"`; done'

#	インデックスデータ（リンク）のコピー
	gxpc e cp $(workspace_mgidx)/idxa$(IDXID).word.dat.2 $(aidxdir)/idx$(IDXID).word.dat
	gxpc e cp $(workspace_mgidx)/idxa$(IDXID).dpnd.dat.2 $(aidxdir)/idx$(IDXID).dpnd.dat
	gxpc e cp $(workspace_mgidx)/offseta$(IDXID).{word,dpnd}.cdb.2.* $(aidxdir)/
	gxpc e 'for f in `ls $(aidxdir)/offseta$(IDXID).{word,dpnd}.cdb.2.0` ; do mv $$f `echo $$f | perl -pe "s/cdb.2.0/cdb/" | perl -pe "s/offseta/offset/"` ; done'

#	データベースのコピー
	gxpc e mv $(workspace_mkdb)/did2title.cdb.0 $(idxdir)/did2title.cdb
	gxpc e mv $(workspace_mkdb)/did2url.cdb.0 $(idxdir)/did2url.cdb
	gxpc e mv $(workspace_mkdb)/$(IDXID).doc_length.txt $(idxdir)/$(IDXID).doc_length.txt
	gxpc e mv $(IDX2DID) $(idxdir)/sid2tid

	gxpc quit





################################################
# 追加ノードに置かれた xml, idx ファイルのコピー
################################################

allocate_data: connect_node10
	gxpc e mkdir -p /data2/work/$(USER)/tmp
	gxpc e sh $(scriptdir)/copy-data-to-host.sh -d $(DATA_DIR) -T /data2/work/$(USER)/tmp $(SF_DIR)
	gxpc e sh $(scriptdir)/copy-data-to-host.sh -d $(DATA_DIR) -T /data2/work/$(USER)/tmp $(TERM_DIR)
	gxpc quit





##########################
# targetids ファイルの作成
##########################

mk_targetids: connect_node11
	gxpc e find $(SF_DIR) | grep xml.gz$ | rev | cut -f 1 -d / | rev | cut -f 1 -d . | sort -n > $(TARGETIDS)










###############################
# gxpでノードを獲得するコマンド
###############################

connect_node:
	echo make connection
	gxpc use $(ACCESS_METHOD) $$HOSTNAME iccc
	gxpc explore --children_hard_limit 1000 -t $(HOST_FILE)
	gxpc e "hostname | grep -v $(HOSTNAME)\\$$"
	gxpc smask
	echo "*** USED HOSTS ***"
	gxpc e hostname | sort

connect_node2:
	cat $(HOST_FILE) | awk '{print $$1,"$(PARA)"}' > $(HOST_FILE).para$(PARA)
	echo make connection
	gxpc use $(ACCESS_METHOD) $$HOSTNAME iccc
	gxpc explore --children_hard_limit 2000 --timeout 600 -t $(HOST_FILE).para$(PARA)
	gxpc explore --children_hard_limit 2000 --timeout 600 -t $(HOST_FILE).para$(PARA)
	gxpc explore --children_hard_limit 2000 --timeout 600 -t $(HOST_FILE).para$(PARA)
	gxpc e "hostname | grep -v $(HOSTNAME)\\$$"
	gxpc smask
	echo "*** USED HOSTS ***"
	gxpc e hostname | sort

connect_node3:
	echo make connection
	gxpc use $(ACCESS_METHOD) $$HOSTNAME iccc
	gxpc explore --children_hard_limit 1000 -t $(HOST_FILE)
	gxpc e "hostname | grep -v $(HOSTNAME)\\$$"
	gxpc smask
	echo "*** USED HOSTS ***"
	gxpc e hostname | sort

connect_node4:
	echo make connection
	gxpc use $(ACCESS_METHOD) $$HOSTNAME iccc
	gxpc explore --children_hard_limit 1000 -t $(HOST_FILE)
	gxpc e "hostname | grep -v $(HOSTNAME)\\$$"
	gxpc smask
	echo "*** USED HOSTS ***"
	gxpc e hostname

connect_node5:
	echo make connection
	gxpc use $(ACCESS_METHOD) $$HOSTNAME iccc
	gxpc explore --children_hard_limit 1000 -t $(HOST_FILE)
	gxpc e "hostname | grep -v $(HOSTNAME)\\$$"
	gxpc smask
	echo "*** USED HOSTS ***"
	gxpc e hostname

connect_node6:
	echo make connection
	gxpc use $(ACCESS_METHOD) $$HOSTNAME iccc
	gxpc explore --children_hard_limit 1000 -t $(HOST_FILE)
	gxpc e "hostname | grep -v $(HOSTNAME)\\$$"
	gxpc smask
	echo "*** USED HOSTS ***"
	gxpc e hostname

connect_node7:
	echo make connection
	gxpc use $(ACCESS_METHOD) $$HOSTNAME iccc
	gxpc explore --children_hard_limit 1000 -t $(HOST_FILE)
	gxpc explore --children_hard_limit 1000 '$(host_of_mkdfdb)'
	gxpc e "hostname | grep -v $(HOSTNAME)"
	gxpc smask
	echo "*** USED HOSTS ***"
	gxpc e hostname

connect_node8:
	echo make connection
	gxpc use $(ACCESS_METHOD) $$HOSTNAME iccc
	gxpc explore --children_hard_limit 1000 -t $(HOST_FILE)
	gxpc e "hostname | grep -v $(HOSTNAME)\\$$"
	gxpc smask
	echo "*** USED HOSTS ***"
	gxpc e hostname

connect_node9:
	echo make connection
	gxpc use $(ACCESS_METHOD) $$HOSTNAME iccc
	gxpc explore --children_hard_limit 1000 -t $(HOST_FILE)
	gxpc e "hostname | grep -v $(HOSTNAME)\\$$"
	gxpc smask
	echo "*** USED HOSTS ***"
	gxpc e hostname

connect_node10:
	echo make connection
	gxpc use $(ACCESS_METHOD) $$HOSTNAME iccc
	gxpc explore --children_hard_limit 1000 -t $(HOST_FILE)
	gxpc e "hostname | grep -v $(HOSTNAME)\\$$"
	gxpc smask
	echo "*** USED HOSTS ***"
	gxpc e hostname

connect_node11:
	echo make connection
	gxpc use $(ACCESS_METHOD) $$HOSTNAME iccc
	gxpc explore --children_hard_limit 1000 -t $(HOST_FILE)
	gxpc e "hostname | grep -v $(HOSTNAME)\\$$"
	gxpc smask
	echo "*** USED HOSTS ***"
	gxpc e hostname
